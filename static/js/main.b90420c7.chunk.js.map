{"version":3,"sources":["api/api.tsx","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","selectedUserId","setSelectedUserId","useState","query","setQuery","todos","setTodos","selectQuery","setSelectQuery","filteredTodos","filter","todo","title","includes","completed","useEffect","fetch","then","response","ok","json","Promise","reject","className","type","value","onChange","event","target","placeholder","map","checked","readOnly","userId","onClick","id","CurrentUser","setUserId","selectedUser","setSelectedUser","requestUser","promise","name","email","phone","App","setUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b90420c7.chunk.js","sourcesContent":["/* eslint-disable no-console */\nconst TODOS_URL = 'https://mate.academy/students-api/todos';\nconst USERS_URL = 'https://mate.academy/students-api/users';\n\nexport function requestTodos(): Promise<Todo[]> {\n  return fetch(TODOS_URL)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject();\n      }\n\n      return response.json();\n    });\n}\n\nexport const requestUser = (userId: number): Promise<User> => {\n  return fetch(`${USERS_URL}/${userId}`)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject();\n      }\n\n      return response.json();\n    });\n};\n","/* eslint-disable max-len */\n/* eslint-disable react/jsx-one-expression-per-line */\nimport React, { useState, useEffect } from 'react';\nimport { requestTodos } from '../../api/api';\nimport './TodoList.scss';\n\ntype Props = {\n  selectedUserId: number,\n  setSelectedUserId: (userId: number) => void;\n};\n\n// eslint-disable-next-line max-len\nexport const TodoList: React.FC<Props> = ({ selectedUserId, setSelectedUserId }) => {\n  const [query, setQuery] = useState('');\n  const [todos, setTodos] = useState<Todo[] | []>([]);\n  const [selectQuery, setSelectQuery] = useState('');\n  const filteredTodos = todos.filter(todo => todo.title.includes(query)).filter(todo => {\n    switch (selectQuery) {\n      case 'active':\n        return todo.completed === false;\n\n      case 'completed':\n        return todo.completed === true;\n\n      default:\n        return todo;\n    }\n  });\n\n  useEffect(() => {\n    requestTodos().then(response => setTodos(response));\n  }, []);\n\n  // switch (selectQuery) {\n  //   case 'active':\n  //     setTodos(todos.filter(todo => todo.completed === false));\n  //     break;\n  //\n  //   case completed:\n  //     setTodos(todos.filter(todo => todo.completed === true))\n  //\n  //   default:\n  //\n  // }\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <input\n        data-cy=\"filterByTitle\"\n        type=\"text\"\n        value={query}\n        onChange={\n          (event) => {\n            setQuery(event.target.value);\n          }\n        }\n        placeholder=\"Search by title\"\n      />\n\n      <select value={selectQuery} onChange={(event) => setSelectQuery(event.target.value)}>\n        <option value=\"all\">Show all</option>\n        <option value=\"active\">Show all uncompleted</option>\n        <option value=\"completed\">Show all completed</option>\n      </select>\n\n      <div className=\"TodoList__list-container\">\n\n        <ul data-cy=\"listOfTodos\" className=\"TodoList__list\">\n          {filteredTodos?.map((todo: Todo) => (\n            <li\n              key={todo.id}\n              className={\n                todo.completed\n                  ? 'TodoList__item TodoList__item--checked'\n                  : 'TodoList__item TodoList__item--unchecked'\n              }\n            >\n              <label>\n                <input checked={todo.completed} type=\"checkbox\" readOnly />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                data-cy=\"userButton\"\n                className={\n                  selectedUserId === todo.userId\n                    // eslint-disable-next-line max-len\n                    ? 'TodoList__user-button TodoList__user-button--selected button'\n                    : 'TodoList__user-button button'\n                }\n                type=\"button\"\n                onClick={() => {\n                  if (todo.userId !== selectedUserId) {\n                    return (setSelectedUserId(todo.userId));\n                  }\n\n                  return null;\n                }}\n              >\n                User&nbsp;#{todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable max-len */\n/* eslint-disable react/jsx-one-expression-per-line */\nimport React, { useEffect, useState } from 'react';\nimport { requestUser } from '../../api/api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number,\n  setUserId: (userId: number) => void,\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, setUserId }) => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    requestUser(userId).then(promise => setSelectedUser(promise));\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${selectedUser?.id}`}</span></h2>\n\n      <h3 data-cy=\"userName\" className=\"CurrentUser__name\">{selectedUser?.name}</h3>\n      <p className=\"CurrentUser__email\">{selectedUser?.email}</p>\n      <p className=\"CurrentUser__phone\">{selectedUser?.phone}</p>\n      <button\n        type=\"button\"\n        className=\"TodoList__user-button button\"\n        onClick={\n          () => setUserId(0)\n        }\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const setUser = (userId: number) => {\n    return setSelectedUserId(userId);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          selectedUserId={selectedUserId}\n          setSelectedUserId={setUser}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser userId={selectedUserId} setUserId={setUser} />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}